# --------------------- Information ---------------------

print "Supply Crew Dev Version! DO NOT PUBLICLY USE!"
# print "Supply Crew v2.6.3 by SBytes"
print "> The micro item retriever"
print "#DethroneAttem83"
print "------------------------------------------------------------------------------------"
print "Additional Info:"
print "Linkable to switch (must be switch1)"
print "If you think the logic is malfunctioning, break and replace"
print "If its still malfunctioning, notify SByte#7574 on Discord"
print "------------------------------------------------------------------------------------"

# --------------------- Default Settings ---------------------

print "--- General Settings ---"

print "Unit type and amount, max 9. Setting above 9 or below 1 will halt processor"
set unitType @flare
set unitAmount 1

print "Minimum resources in core before taking items (setting to 0 disables it)"
set minRes 2e3

print "Items to retrieve from core and their max amount"
set item1 null
set max1 0
set prio1 1
set item2 null
set max2 0
set prio2 1
set item3 null
set max3 0
set prio3 1
set item4 null
set max4 0
set prio4 1

print "Items to return to core and their minimum amount before returning"
set item5 null
set min1 0
set prio5 2
set item6 null
set min2 0
set prio6 2



print "--- Advanced settings ---"
print "Warning: Do not change these default settings unless you absolutely know what you're doing."

print "Maximum inactive time before unbinding units (in seconds)"
set maxInactiveTime 20

print "Maximum drop take attempts"
set dropTake_maxAttempts 2

# --------------------- Debug ---------------------
# set unitType @flare
# set unitAmount 6

# set item1 @sand
# set max1 50
# set prio1 1
# set item2 @lead
# set max2 50
# set prio2 1
# set item3 null
# set max3 0
# set prio3 1
# set item4 null
# set max4 0
# set prio4 1

# set item5 @metaglass
# set min1 0
# set prio5 2
# set item6 null
# set min2 0
# set prio6 2

print "Set editDone to 1 if you are finished linking and setting everything up"
# set editDone 1
set editDone 0
editNotDone:
jump editNotDone equal editDone 0

print "--- Edit above ---"
print "No touching stuff below :P"

# --------------------- End of Settings ---------------------

# -------------------- Setup and precalc --------------------

jump 0 greaterThanEq unitAmount 10     # Make sure amount is between 1 and 9
jump 0 lessThanEq unitAmount 0

op mul maxInactiveTime maxInactiveTime 1e3       # Convert seconds to milliseconds

op div unitItemStep 1 unitAmount            # Calculate unitItemStep, used for distribution
op div unitItemHalfStep unitItemStep 2

op mul thisFlag @thisx @maph           # Generate unique flag with thisx * maph + thisy
op add thisFlag thisFlag @thisy




# Initialize core
jump initCore_end lessThanEq minRes 0
    initCore:
    ubind unitType                        # Check for an existing unit of unitType
    jump initCore equal @unit null        # Keep looping until one is found.

    ulocate building core 0 0 coreX coreY 0 core # Locate a core, shouldn't break other logic unless they're flagless.

    sensor coreSize core @size                   # Approach and within radius
    set cachedCoreSize coreSize
    op mul coreWithinRadius 0.375 coreSize
    op add coreWithinRadius 5.625 coreWithinRadius
    op sub coreApproachRadius coreWithinRadius 0.5
initCore_end:


# Initialize destination.
initDest:
getlink destination 0
jump initDest equal destination null # Keep looping if dest is nonexistent
set cachedDest destination           # Store it in cache
sensor destX destination @x          # Coordinates
sensor destY destination @y

sensor destSize destination @size  # Approach and within radius
op mul destWithinRadius 0.375 destSize
op add destWithinRadius 5.625 destWithinRadius
op sub destApproachRadius destWithinRadius  0.5


# -------------------- Main Execution ---------------------

start:

# Check for new destination building
getlink destination 0
jump initDest notEqual destination cachedDest

# Unbind if switch is disabled
sensor switch switch1 @enabled
jump unbind strictEqual switch false

# Reset unitsCalcItemDist
set unitsCalcItemDist 0

# Reset needTotal
set needTotal 0


# Item distribution (I am bad at explaining things aaaa)
# Get each item's cap, and the amount we have in destination.
# Get the need value;
#
#         cap - have = need
#
# If said item has less than minRes in core, assume we dont need it;
#
#        need = 0
#
# 'Need' has to be a positive integer, either 0 or 1....
#
#         need = max(need, 0)
#
# Increment total 'need's
#
#         needTotal += need
#

jump itemDist_R1 equal max1 0
    sensor coreHave1 core item1
    jump itemDist_1minRes lessThan coreHave1 minRes
        sensor have1 destination item1
        op sub need1 max1 have1
        op max need1 0 need1
        op mul need1 need1 prio1
        jump itemDist_1minRes_end always 0
    itemDist_1minRes:
        set need1 0
    itemDist_1minRes_end:
    op add needTotal needTotal need1
itemDist_2:
jump itemDist_R1 equal max2 0
    sensor coreHave2 core item2
    jump itemDist_2minRes lessThan coreHave2 minRes
        sensor have2 destination item2
        op sub need2 max2 have2
        op max need2 0 need2
        op mul need2 need2 prio2
        jump itemDist_2minRes_end always 0
    itemDist_2minRes:
        set need2 0
    itemDist_2minRes_end:
    op add needTotal needTotal need2
    jump itemDist_3 always 0
itemDist_3:
jump itemDist_R1 equal max3 0
    sensor coreHave3 core item3
    jump itemDist_3minRes lessThan coreHave3 minRes
        sensor have3 destination item3
        op sub need3 max3 have3
        op max need3 0 need3
        op mul need3 need3 prio3
        jump itemDist_3minRes_end always 0
    itemDist_3minRes:
        set need3 0
    itemDist_3minRes_end:
    op add needTotal needTotal need3
itemDist_4:
jump itemDist_R1 equal max4 0
    sensor coreHave4 core item4
    jump itemDist_4minRes lessThan coreHave4 minRes
        sensor have4 destination item4
        op sub need4 max4 have4
        op max need4 0 need4
        op mul need4 need4 prio4
        jump itemDist_4minRes_end always 0
    itemDist_4minRes:
        set need4 0
    itemDist_4minRes_end:
    op add needTotal needTotal need4
itemDist_R1:
jump itemDist_end equal item5 null
    sensor have5 destination item5
    op sub need5 have5 min1
    op max need5 0 need5
    op mul need5 need5 prio5
    op add needTotal needTotal need5
itemDist_R2:
jump itemDist_end equal item6 null
    sensor have6 destination item6
    op sub need6 have6 min2
    op max need6 0 need6
    op mul need6 need6 prio6
    op add needTotal needTotal need6
itemDist_end:


# Unbind if no items are needed
jump need0_skip greaterThan needTotal 0
    # Just skip to start if there isnt any units to unbind
    jump start equal unitRef1 null

    # Unbind if its been longer than maxInactiveTime
    op sub inactiveTime @time lastActiveTime
    jump unbind greaterThanEq inactiveTime maxInactiveTime

    # Otherwise just idle at destination
    jump ctrl_idle always 0
need0_skip:
set lastActiveTime @time


# Item distribution probabilities
# Probability = need / needTotal
# Stack those probability on each other and then iterate through it.
op div need1P need1 needTotal
op div need2P need2 needTotal
op add need2P need2P need1P
op div need3P need3 needTotal
op add need3P need3P need2P
op div need4P need4 needTotal
op add need4P need4P need3P

op div need5P need5 needTotal
op add need5P need5P need4P
op div need6P need6 needTotal
op add need6P need6P need5P



# Re-locate core building (incase there exists a closer one)
ulocate building core 0 0 coreX coreY 0 core

sensor coreSize core @size
jump coreSize_skip equal coreSize cachedCoreSize # Check for core size
    set cachedCoreSize coreSize                  # Recalculate approach and within radius if necessary
    op mul coreWithinRadius 0.375 coreSize
    op add coreWithinRadius 5.625 coreWithinRadius
    op sub coreApproachRadius coreWithinRadius 0.5
coreSize_skip:

# Reset item index
set unitItemI unitItemHalfStep




# -------------------- Main Loop ---------------------

ctrlLoop:
    # ------------------- Unit selection -------------------

    # Bind a unit from the array
    op mul unitSelect_counterJump unitIndex 2
    op add @counter @counter unitSelect_counterJump
        ubind unitRef1
        jump unitSel_end always 0
        ubind unitRef2
        jump unitSel_end always 0
        ubind unitRef3
        jump unitSel_end always 0
        ubind unitRef4
        jump unitSel_end always 0
        ubind unitRef5
        jump unitSel_end always 0
        ubind unitRef6
        jump unitSel_end always 0
        ubind unitRef7
        jump unitSel_end always 0
        ubind unitRef8
        jump unitSel_end always 0
        ubind unitRef9
    unitSel_end:


    # ------------------- Unit validicity and Binding -------------------

    # Status checks
    sensor unitDead @unit @dead
    jump bind equal unitDead 1
    sensor unitFlag @unit @flag
    jump bind notEqual unitFlag thisFlag
    sensor unitCtrlr @unit @controller
    jump bind notEqual unitCtrlr @this
    jump bind_end equal unwantedItems 0
        jump bind_clearItems always 0

        # Bind new unit
        bind:

        op shl unitsCalcItemDist_bitSel 1 unitIndex                        # make sure to mark them as dropTaken
        op or unitsCalcItemDist unitsCalcItemDist unitsCalcItemDist_bitSel       # or else they might get stuck

        op add bindTillTime @time 333 # 5 / 120 * 1e3 * 8
        bind_loop:
            jump bind_decCounter greaterThanEq @time bindTillTime # to not waste time on a single unit
            ubind unitType
            jump ctrl_end equal @unit null
            sensor unitFlag @unit @flag
            jump bind_loop notEqual unitFlag 0

        # Set flag and stop whatever the unit was doing
        ucontrol stop
        ucontrol flag thisFlag
        ucontrol boost 1 # For nova tree

        # Store the unit
        op add @counter @counter unitSelect_counterJump
            set unitRef1 @unit
            jump unitSet_end always 0
            set unitRef2 @unit
            jump unitSet_end always 0
            set unitRef3 @unit
            jump unitSet_end always 0
            set unitRef4 @unit
            jump unitSet_end always 0
            set unitRef5 @unit
            jump unitSet_end always 0
            set unitRef6 @unit
            jump unitSet_end always 0
            set unitRef7 @unit
            jump unitSet_end always 0
            set unitRef8 @unit
            jump unitSet_end always 0
            set unitRef9 @unit
        unitSet_end:

        # Clear items
        bind_clearItems:
            # clear the tasks' 3 bits at the unit index
            op shl unitTasks_bitSet 0b111 unitTaskI
            op not unitTasks_bitSet unitTasks_bitSet 0
            op and unitTasks unitTasks unitTasks_bitSet 0

            # Unit bit check
            sensor unitItem @unit @firstItem
            jump bind_clearItems_skip equal unitItem null
            jump bind_clearItems_skip equal unitItem item1
            jump bind_clearItems_skip equal unitItem item2
            jump bind_clearItems_skip equal unitItem item3
            jump bind_clearItems_skip equal unitItem item4
                # Bit hacking, set the nth bit
                op shl unwantedItems_bitSel 1 unitIndex
                op or unwantedItems unwantedItems unwantedItems_bitSel

                # Drop item to core
                ulocate building core 0 0 coreX coreY 0 core
                ucontrol itemDrop core 999
                ucontrol approach coreX coreY coreApproachRadius
                jump bind_decCounter always 0
            bind_clearItems_skip:
                # Bit hacking, clear the nth bit
                op shl unwantedItems_bitSel 1 unitIndex
                op not unwantedItems_bitSel unwantedItems_bitSel 0
                op and unwantedItems unwantedItems unwantedItems_bitSel
                jump bind_end always 0

        # Decrement counted units
        bind_decCounter:
        op sub unitCounter unitCounter 1
        jump ctrl_end always 0
    bind_end:


    ## ------------------- Item selection -------------------

    # old method:
        # sensor unitItem @unit @firstItem

        # jump item_return_skip lessThanEq unitItemI need4P
        #     jump ctrl_Rdrop notEqual unitItem null
        #     jump ctrl_Rtake always 0
        # item_return_skip:

        # jump ctrl_drop notEqual unitItem null

    ## New method:

    # store the items cache in a variable.
    # format: ...000... where each 3 bits represent a single unit's item (8 cap, 7 used)
    op shr unitTasks_bitSel unitTasks unitTaskI
    op and unitTasks_bitSel unitTasks_bitSel 0b111 # mask the 3 bits

    # itemSel_return:
    jump ctrl_Rdrop equal unitTasks_bitSel 4
    jump ctrl_Rtake equal unitTasks_bitSel 3
    # itemSel_retrieve:
    jump ctrl_drop equal unitTasks_bitSel 2
    jump ctrl_take equal  unitTasks_bitSel 1
    # itemSel_zero:
    jump ctrl_Rtake_set greaterThan unitItemI need4P



    # ------------------- Unit Control -------------------

    # Take items from core to destination
    ctrl_take_set:
        op shl unitTasks_bitSet 1 unitTaskI
        op or unitTasks unitTasks unitTasks_bitSet
    ctrl_take:
        ucontrol approach coreX coreY coreApproachRadius
        ucontrol within coreX coreY coreWithinRadius within
        jump ctrl_end equal within 0
            # Reset drop take attempts
            set dropTake_attempts 0

            # clear out possibly unwanted junk
            sensor unitItem @unit @firstItem
            jump ctrl_take_itemClear_end equal unitItem null
                ctrl_take_itemClear_loop:
                    ucontrol itemDrop core 999
                    ucontrol itemDrop @air 999
                    sensor unitItem @unit @firstItem
                jump ctrl_take_itemClear_loop notEqual unitItem null
            ctrl_take_itemClear_end:

            # choose item
            jump choose_i2 greaterThan unitItemI need1P
                set itemToTake item1
                jump choose_end always 0
            choose_i2:
            jump choose_i3 greaterThan unitItemI need2P
                set itemToTake item2
                jump choose_end always 0
            choose_i3:
            jump choose_i4 greaterThan unitItemI need3P
                set itemToTake item3
                jump choose_end always 0
            choose_i4:
                set itemToTake item4
            choose_end:

            # take loop attempts
            ctrl_take_itemTake:
            ucontrol itemTake core itemToTake 999

            sensor unitItem @unit @firstItem
            jump ctrl_take_sendBack notEqual unitItem null
            # jump ctrl_end notEqual unitItem null

                # Limit to only n attempts
                op add dropTake_attempts dropTake_attempts 1
                jump ctrl_markCalcItemDist greaterThan dropTake_attempts dropTake_maxAttempts

                # Bind status
                sensor unitDead @unit @dead
                jump ctrl_end equal unitDead 1
                sensor unitFlag @unit @flag
                jump ctrl_end notEqual unitFlag thisFlag
                sensor unitCtrlr @unit @controller
                jump ctrl_take_itemTake equal unitCtrlr @this
                jump ctrl_end always 0

            # # Immediately send back to save time
            ctrl_take_sendBack:
                # set the 3 bits at the unit index
                op shl unitTasks_bitSet 0b111 unitTaskI
                op not unitTasks_bitSet unitTasks_bitSet 0
                op and unitTasks unitTasks unitTasks_bitSet
                op shl unitTasks_bitSet 2 unitTaskI
                op or unitTasks unitTasks unitTasks_bitSet
            ucontrol approach destX destY destApproachRadius
            jump ctrl_markCalcItemDist always 0

    # Drop items from core to destination
    ctrl_drop:
        ucontrol within destX destY destWithinRadius within
        ucontrol approach destX destY destApproachRadius
        jump ctrl_end equal within 0
            # Reset drop take attempts
            set dropTake_attempts 0

            # Check for invalid item
            sensor unitItem @unit @firstItem
            jump ctrl_drop_invalidItem_skip equal unitItem item1
            jump ctrl_drop_invalidItem_skip equal unitItem item2
            jump ctrl_drop_invalidItem_skip equal unitItem item3
            jump ctrl_drop_invalidItem_skip equal unitItem item4
                ucontrol itemDrop @air 999
                jump ctrl_drop_sendBack always 0
            ctrl_drop_invalidItem_skip:

            ctrl_drop_itemDrop:

            ucontrol itemDrop destination 999
            sensor unitItem @unit @firstItem
            jump ctrl_drop_sendBack equal unitItem null
            # jump ctrl_end equal unitItem null

                # Limit to only n attempts
                op add dropTake_attempts dropTake_attempts 1
                jump ctrl_markCalcItemDist greaterThan dropTake_attempts dropTake_maxAttempts

                # Bind status
                sensor unitDead @unit @dead
                jump ctrl_end equal unitDead 1
                sensor unitFlag @unit @flag
                jump ctrl_end notEqual unitFlag thisFlag
                sensor unitCtrlr @unit @controller
                jump ctrl_drop_itemDrop equal unitCtrlr @this
                jump ctrl_end always 0

            # Immediately send back to save time
            ctrl_drop_sendBack:
                # clear the 3 bits at the unit index
                op shl unitTasks_bitSet 0b111 unitTaskI
                op not unitTasks_bitSet unitTasks_bitSet 0
                op and unitTasks unitTasks unitTasks_bitSet 0
            ucontrol approach coreX coreY coreApproachRadius
            jump ctrl_markCalcItemDist always 0

    # Take item (from destination return to core)
    ctrl_Rtake_set:
        op shl unitTasks_bitSet 3 unitTaskI
        op or unitTasks unitTasks unitTasks_bitSet
    ctrl_Rtake:
        ucontrol within destX destY destWithinRadius within
        ucontrol approach destX destY destApproachRadius
        jump ctrl_end equal within 0
            # Reset drop take attempts
            set dropTake_attempts 0

            # clear out possibly unwanted junk
            sensor unitItem @unit @firstItem
            jump ctrl_Rtake_itemClear_end equal unitItem null
                ctrl_Rtake_itemClear_loop:
                    ucontrol itemDrop core 999
                    ucontrol itemDrop @air 999
                    sensor unitItem @unit @firstItem
                jump ctrl_Rtake_itemClear_loop notEqual unitItem null
            ctrl_Rtake_itemClear_end:

            # choose item
            jump choose_rI2 greaterThan unitItemI need5P
                set itemToTake item5
                jump choose_rEnd always 0
            choose_rI2:
                set itemToTake item6
                ucontrol itemTake destination item6 999
            choose_rEnd:

            ctrl_Rtake_itemTake:
            ucontrol itemTake destination itemToTake 999

            sensor unitItem @unit @firstItem
            jump ctrl_Rtake_sendBack notEqual unitItem null
            # jump ctrl_end notEqual unitItem null

                # Limit to only n attempts
                op add dropTake_attempts dropTake_attempts 1
                jump ctrl_markCalcItemDist greaterThan dropTake_attempts dropTake_maxAttempts

                # Bind status
                sensor unitDead @unit @dead
                jump ctrl_end equal unitDead 1
                sensor unitFlag @unit @flag
                jump ctrl_end notEqual unitFlag thisFlag
                sensor unitCtrlr @unit @controller
                jump ctrl_Rtake_itemTake equal unitCtrlr @this
                jump ctrl_end always 0

            # Immediately send back to save time
            ctrl_Rtake_sendBack:
                # set the 3 bits at the unit index
                op shl unitTasks_bitSet 0b111 unitTaskI
                op not unitTasks_bitSet unitTasks_bitSet 0
                op and unitTasks unitTasks unitTasks_bitSet 0
                op shl unitTasks_bitSet 4 unitTaskI
                op or unitTasks unitTasks unitTasks_bitSet
            ucontrol approach coreX coreY coreApproachRadius
            jump ctrl_markCalcItemDist always 0

    # Drop item (from destination return to core)
    ctrl_Rdrop:
        ucontrol within coreX coreY coreWithinRadius within
        ucontrol approach coreX coreY coreApproachRadius
        jump ctrl_end equal within 0
            # Reset drop take attempts
            set dropTake_attempts 0

            ctrl_Rdrop_itemDrop:

            ucontrol itemDrop core 999
            sensor unitItem @unit @firstItem
            jump ctrl_Rdrop_sendBack equal unitItem null
            # jump ctrl_end equal unitItem null

                # Limit to only n attempts
                op add dropTake_attempts dropTake_attempts 1
                jump ctrl_markCalcItemDist greaterThan dropTake_attempts 3

                # Bind status
                sensor unitDead @unit @dead
                jump ctrl_end equal unitDead 1
                sensor unitFlag @unit @flag
                jump ctrl_end notEqual unitFlag thisFlag
                sensor unitCtrlr @unit @controller
                jump ctrl_Rdrop_itemDrop equal unitCtrlr @this
                jump ctrl_end always 0

        # Immediately send back to save time
        ctrl_Rdrop_sendBack:
            # clear the 3 bits at the unit index
            op shl unitTasks_bitSet 0b111 unitTaskI
            op not unitTasks_bitSet unitTasks_bitSet 0
            op and unitTasks unitTasks unitTasks_bitSet 0
        ucontrol approach destX destY destApproachRadius

    ctrl_markCalcItemDist:
        op shl unitsCalcItemDist_bitSel 1 unitIndex
        op or unitsCalcItemDist unitsCalcItemDist unitsCalcItemDist_bitSel
    ctrl_end:

    # Reset stuff and loop back
    op add unitIndex unitIndex 1
    op mul unitItemI unitItemStep unitIndex
    op mul unitTaskI unitIndex 3

jump ctrlLoop lessThan unitIndex unitAmount

# Reset unit index
set unitIndex 0

# Recalculate max unit drop taken
op shl maxUnitDropTaken 1 unitCounter
op sub maxUnitDropTaken maxUnitDropTaken 1
set unitCounter unitAmount

# Jump to start and recalculate item probabilities if every unit has drop/taken
jump start equal unitsCalcItemDist maxUnitDropTaken

# Otherwise keep looping
jump ctrlLoop always 0



# Units idling near destination
ctrl_idle:
    op sub idleJump 9 unitAmount
    op mul idleJump 3 idleJump
    op add @counter @counter counterJump

    ubind unitRef9
    jump start equal @unit null
    ucontrol approach destX destY 6

    ubind unitRef8
    jump start equal @unit null
    ucontrol approach destX destY 6

    ubind unitRef7
    jump start equal @unit null
    ucontrol approach destX destY 6

    ubind unitRef6
    jump start equal @unit null
    ucontrol approach destX destY 6

    ubind unitRef5
    jump start equal @unit null
    ucontrol approach destX destY 6

    ubind unitRef4
    jump start equal @unit null
    ucontrol approach destX destY 6

    ubind unitRef3
    jump start equal @unit null
    ucontrol approach destX destY 6

    ubind unitRef2
    jump start equal @unit null
    ucontrol approach destX destY 6

    ubind unitRef1
    jump start equal @unit null
    ucontrol approach destX destY 6

jump start always 0




# Unbind and deflag
unbind:
    op sub unbindJump 9 unitAmount
    op mul unbindJump 5 unbindJump
    op add @counter @counter counterJump

    ubind unitRef9
    set unitRef9 null
    ucontrol flag 0
    ulocate building core 0 0 coreX coreY 0 core
    ucontrol move coreX coreY

    ubind unitRef8
    set unitRef8 null
    ucontrol flag 0
    ulocate building core 0 0 coreX coreY 0 core
    ucontrol move coreX coreY

    ubind unitRef7
    set unitRef7 null
    ucontrol flag 0
    ulocate building core 0 0 coreX coreY 0 core
    ucontrol move coreX coreY

    ubind unitRef6
    set unitRef6 null
    ucontrol flag 0
    ulocate building core 0 0 coreX coreY 0 core
    ucontrol move coreX coreY

    ubind unitRef5
    set unitRef5 null
    ucontrol flag 0
    ulocate building core 0 0 coreX coreY 0 core
    ucontrol move coreX coreY

    ubind unitRef4
    set unitRef4 null
    ucontrol flag 0
    ulocate building core 0 0 coreX coreY 0 core
    ucontrol move coreX coreY

    ubind unitRef3
    set unitRef3 null
    ucontrol flag 0
    ulocate building core 0 0 coreX coreY 0 core
    ucontrol move coreX coreY

    ubind unitRef2
    set unitRef2 null
    ucontrol flag 0
    ulocate building core 0 0 coreX coreY 0 core
    ucontrol move coreX coreY

    ubind unitRef1
    set unitRef1 null
    ucontrol flag 0
    ulocate building core 0 0 coreX coreY 0 core
    ucontrol move coreX coreY

jump start always 0


### --------------------- CREDITS ---------------------

print "Supply Crew Dev by SBytes"
print "Not for public use!"
# print "Supply Crew v2.7 by SBytes"
# print "Changelog:"
# print "Added item priority coefficients. Return items are by default prioritized."
# print "Configurable max drop take attempts"
# print "Rewrote item selection system"
