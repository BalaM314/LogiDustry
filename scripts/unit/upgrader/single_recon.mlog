# User vars
set minUnitAmount 10
set reconLink 2
print "-- Edit above --"
printflush message1

# Initialization message
# print "[sky]Unit Upgrader vDev\n[green]by SBytes\n\n[][]Initializing..."
# print "[sky]Unit Upgrader vDev\n[green]by SBytes[][]"
# printflush message1

# Cache set
set cachedSorterConfig -1
set cachedReconType -1

# Flag initialization
op mul thisFlag @thisy @mapw
op add thisFlag thisFlag @thisx


# -----------------------------------------------
# ---------------- CONFIG CHECK -----------------
# -----------------------------------------------

configCheck:

# Clear Units
ubind unitRef
ucontrol flag 0 0
ubind taxiRef
ucontrol flag 0 0
set unitRef null
set taxiRef null

# Reconstructor check
getlink reconstructor reconLink
sensor reconType reconstructor @type
jump print_reconstructorError equal reconType null
# recon stuf
sensor reconX reconstructor @x
sensor reconY reconstructor @y
sensor reconSize reconstructor @size
op add reconIdleRadius reconSize 2
op add reconIdleWithinRadius reconIdleRadius 4
op div reconDropRadius reconSize 2
op sub reconDropRadius reconDropRadius 0.35

# Message check
# jump print_messageError equal message1 null

# Unit selection
jump configCheck equal sorter1 null
sensor sorterConfig sorter1 @config
jump configCheck equal sorter1 null

# Overwrite cache
set cachedSorterConfig sorterConfig
set cachedReconType reconType

# Tier 1
jump tier_2 notEqual reconType @additive-reconstructor
    set printInfo "[sky]Unit Upgrader vDev\n[green]by SBytes[][]\n\nUse sorter  to select unit\n = ,  = ,  = ,  = ,  = \n = ,  = "
    print printInfo

    jump t1_dagger notEqual sorterConfig @copper
        printflush message1
        set unitType @dagger
        set taxiType @mega
        jump taxiMode always 0
    t1_dagger:
    jump t1_nova notEqual sorterConfig @lead
        printflush message1
        set unitType @nova
        set taxiType null
        jump unitMode always 0
    t1_nova:
    jump t1_crawler notEqual sorterConfig @metaglass
        printflush message1
        set unitType @crawler
        set taxiType @mega
        jump taxiMode always 0
    t1_crawler:
    jump t1_flare notEqual sorterConfig @graphite
        printflush message1
        set unitType @flare
        set taxiType null
        jump unitMode always 0
    t1_flare:
    jump t1_mono notEqual sorterConfig @sand
        printflush message1
        set unitType @mono
        set taxiType null
        jump unitMode always 0
    t1_mono:
    jump t1_risso notEqual sorterConfig @coal
        printflush message1
        set unitType @risso
        set taxiType @mega
        jump taxiMode always 0
    t1_risso:
    jump print_sorterNull notEqual sorterConfig @titanium
        printflush message1
        set unitType @retusa
        set taxiType @mega
        jump taxiMode always 0
    # t1_retusa:



# Tier 2
tier_2:
jump tier_3 notEqual reconType @multiplicative-reconstructor
    set printInfo "[sky]Unit Upgrader vDev\n[green]by SBytes[][]\n\nUse sorter  to select unit\n = ,  = ,  = ,  = ,  = \n = ,  = "
    print printInfo

    # Mace
    jump t2_pulsar notEqual sorterConfig @copper
        printflush message1
        set unitType @mace
        set taxiType @mega
        jump taxiMode always 0
    t2_pulsar:
    jump t2_atrax notEqual sorterConfig @lead
        printflush message1
        set unitType @pulsar
        set taxiType null
        jump unitMode always 0
    t2_atrax:
    jump t2_horizon notEqual sorterConfig @metaglass
        printflush message1
        set unitType @atrax
        set taxiType @mega
        jump taxiMode always 0
    t2_horizon:
    jump t2_poly notEqual sorterConfig @graphite
        printflush message1
        set unitType @horizon
        set taxiType null
        jump unitMode always 0
    t2_poly:
    jump t2_minke notEqual sorterConfig @sand
        printflush message1
        set unitType @poly
        set taxiType null
        jump unitMode always 0
    t2_minke:
    jump print_sorterNull notEqual sorterConfig @coal
        printflush message1
        set unitType @minke
        set taxiType @mega
        jump taxiMode always 0
    # t2_oxynoe:




# Tier 3
tier_3:
jump tier_4 notEqual reconType @exponential-reconstructor
    set printInfo "[sky]Unit Upgrader vDev\n[green]by SBytes[][]\n\nUse sorter  to select unit\n = ,  = ,  = ,\n = ,  = ,  = ,  = "
    print printInfo


    # Units
    jump t3_fortress notEqual sorterConfig @copper
        printflush message1
        set unitType @fortress
        set taxiType @mega
        jump taxiMode always 0
    t3_fortress:
    jump t3_quasar notEqual sorterConfig @lead
        printflush message1
        set unitType @quasar
        set taxiType null
        jump unitMode always 0
    t3_quasar:
    jump t3_spiroct notEqual sorterConfig @metaglass
        printflush message1
        set unitType @spiroct
        set taxiType @quad
        jump taxiMode always 0
    t3_spiroct:
    jump t3_zenith notEqual sorterConfig @graphite
        printflush message1
        set unitType @zenith
        set taxiType null
        jump unitMode always 0
    t3_zenith:
    jump t3_mega notEqual sorterConfig @sand
        printflush message1
        set unitType @mega
        set taxiType null
        jump unitMode always 0
    t3_mega:
    jump t3_bryde notEqual sorterConfig @coal
        printflush message1
        set unitType @bryde
        set taxiType @quad
        jump taxiMode always 0
    t3_bryde:
    jump print_sorterNull notEqual sorterConfig @plastanium
        printflush message1
        set unitType @oxynoe
        set taxiType @quad
        jump taxiMode always 0
    # t3_cyerce:




# Tier 4
tier_4:
# jump print_sorterNull notEqual reconType @tetrative-reconstructor
    # print "[sky]unit Upgrader vDev\n[green]by SBytes[][]\n\nUse sorter  to select Unit\n = ,  = ,  = ,\n = ,  = ,  = "
    set printInfo "[sky]Unit Upgrader vDev\n[green]by SBytes[][]\n\nUse sorter  to select unit\n = ,  = ,  = ,\n = ,  = "
    print printInfo


    # Units
    jump t4_scepter notEqual sorterConfig @copper
        printflush message1
        set unitType @scepter
        set taxiType @quad
        jump taxiMode always 0
    t4_scepter:
    jump t4_vela notEqual sorterConfig @lead
        printflush message1
        set unitType @vela
        set taxiType null
        jump unitMode always 0
    t4_vela:
    jump t4_arkyid notEqual sorterConfig @metaglass
        printflush message1
        set unitType @arkyid
        set taxiType @quad
        jump taxiMode always 0
    t4_arkyid:
    jump t4_antumbra notEqual sorterConfig @graphite
        printflush message1
        set unitType @antumbra
        set taxiType null
        jump unitMode always 0
    t4_antumbra:
    jump t4_quad notEqual sorterConfig @sand
        printflush message1
        set unitType @quad
        set taxiType null
        jump unitMode always 0
    t4_quad:
    jump t4_sei notEqual sorterConfig @coal
        printflush message1
        set unitType @sei
        set taxiType @oct
        jump taxiMode always 0
    t4_sei:



# -----------------------------------------------
# ------------------- Prints --------------------
# -----------------------------------------------
print_reconstructorError:
    print "[sky]Unit Upgrader vDev\n[green]by SBytes[][]\n\n[#ff]⚠ Reconstructor Error!\n[]> Link processor to a single reconstructor"
    printflush message1
    jump configCheck always 0

print_sorterError:
    print "[sky]Unit Upgrader vDev\n[green]by SBytes[][]\n\n[#ff]⚠ Sorter Error!\n[]> Link processor to a single sorter (sorter1) and select an item representing the needed Unit"
    printflush message1
    jump configCheck always 0

print_sorterNull:
    # print "[sky]Unit Upgrader vDev\n[green]by SBytes[][]\n\n[magenta]..Disabled\n[]> No units selected in sorter"
    print "\n\n[magenta] Disabled\n[white]> No units selected in sorter"
    printflush message1
    jump configCheck always 0

# print_messageError:
#     print "[sky]Unit Upgrader vDev\n[green]by SBytes[][]\n\n[#ff]⚠ Message Error!\n[]> Link processor to a single message block (message1) for selection information"
#     printflush message1
#     jump configCheck always 0

print_lackUnits:
    print printInfo
    print "\n\n[orange]⚠ Lack of units!\n[white]> Less than "
    print minUnitAmount
    print " "
    print unitType
    printflush message1

    # Unbind
    ubind unitRef
    ucontrol flag 0 0
    ubind taxiRef
    ucontrol flag 0 0
    set unitRef null
    set taxiRef null
set @counter print_lackUnits_return

# -----------------------------------------------
# -------------------- Unit ---------------------
# -----------------------------------------------
unitCount:
    set print_lackUnits_return @counter

    ubind unitType
    set unitCount 0
    jump print_lackUnits equal @unit null
    set countAnchorunitRef @unit
    unitCount_loop:
        ubind unitType
        jump unitCount equal @unit null
        op add unitCount unitCount 1
        jump unitCount_enoughUnits greaterThanEq unitCount minUnitAmount
    jump unitCount_loop notEqual @unit countAnchorunitRef
jump print_lackUnits always 0
unitCount_enoughUnits:
print printInfo
printflush message1

# Regular control
unitMode:
    # Config check
    sensor sorterConfig sorter1 @config
    jump configCheck notEqual sorterConfig cachedSorterConfig
    getlink reconstructor reconLink
    sensor reconType reconstructor @type
    jump configCheck notEqual reconType cachedReconType

    # Recon empty check
    sensor reconPayload reconstructor @payloadType
    jump unitMode notEqual reconPayload 0


    # Unit control
    sensor unitFlag unitRef @flag
    jump unitMode_bind notEqual unitFlag thisFlag
    sensor unitDead unitRef @dead
    jump unitMode_bind_skip equal unitDead 0
        unitMode_bind:
            ubind unitType
            sensor unitFlag @unit @flag
            jump unitMode_bind notEqual unitFlag 0
        ucontrol flag thisFlag 0
        set unitRef @unit
    unitMode_bind_skip:

    sensor reconX reconstructor @x
    sensor reconY reconstructor @y
    ucontrol move reconX reconY
    ucontrol within reconX reconY 1.5 within
    jump unitMode_notWithin equal within 0
        ucontrol boost 0
        ucontrol payEnter
        jump unitCount always 0
    unitMode_notWithin:
    ucontrol boost 1
jump unitMode always 0



# -----------------------------------------------
# -------------------- Taxi ---------------------
# -----------------------------------------------
# Taxi preCount
taxiCount:
    set print_lackUnits_return @counter

    ubind unitType
    set unitCount 0
    jump print_lackUnits equal @unit null
    set countAnchorunitRef @unit
    taxiCount_loop:
        ubind unitType
        op add unitCount unitCount 1
        jump taxiCount_enoughUnits greaterThanEq unitCount minUnitAmount
    jump taxiCount_loop notEqual @unit countAnchorunitRef
jump print_lackUnits always 0
taxiCount_enoughUnits:
print printInfo
printflush message1

# Taxi control
taxiMode:
    # Config check
    sensor sorterConfig sorter1 @config
    jump configCheck notEqual sorterConfig cachedSorterConfig
    getlink reconstructor reconLink
    sensor reconType reconstructor @type
    jump configCheck notEqual reconType cachedReconType

    # Bind check
    sensor taxiFlag taxiRef @flag
    jump taxiMode_bind notEqual taxiFlag thisFlag
    sensor taxiDead taxiRef @dead
    jump taxiMode_bind equal taxiDead 1
    sensor taxiCtrl taxiRef @controlled
    jump taxiMode_bind_skip lessThanEq taxiCtrl 1
        taxiMode_bind:
            ubind taxiType
            sensor taxiFlag @unit @flag
            jump taxiMode_bind notEqual taxiFlag 0
        set taxiRef @unit
        ucontrol flag thisFlag 0
    taxiMode_bind_skip:


    # Has payload check
    sensor taxiPayload taxiRef @payloadType
    # jump taxiMode_take_payload equal unitPayload null
    # jump taxiMode_wrong_payload notEqual unitPayload taxiType
    jump taxiMode_has_payload equal taxiPayload unitType
        taxiMode_take_payload:

        # unit check
        sensor unitFlag unitRef @flag
        jump taxiMode_unit_bind notEqual unitFlag thisFlag
        sensor unitDead unitRef @dead
        jump taxiMode_unit_bind equal unitDead 1
        sensor unitCtrl unitRef @controlled
        jump taxiMode_unit_bind_skip lessThanEq unitCtrl 1
            taxiMode_unit_bind:
                ubind unitType
                sensor unitFlag @unit @flag
                jump taxiMode_unit_bind notEqual unitFlag 0
            set unitRef @unit
            ucontrol flag thisFlag 0
        taxiMode_unit_bind_skip:


        ubind unitRef
        ucontrol stop
        sensor unitX unitRef @x
        sensor unitY unitRef @y
        ubind taxiRef
        ucontrol payDrop
        ucontrol move unitX unitY
        ucontrol within unitX unitY 1 within
        jump taxiMode equal within 0
            ucontrol payTake 1
            jump taxiMode always 0
    # taxiMode_wrong_payload:
    #     sensor taxiX taxiRef @x
    #     sensor taxiY taxiRef @y
    #     ubind unitRef
    #     ucontrol move taxiX taxiY
    #     ucontrol payDrop
    #     jump taxiMode always 0

    taxiMode_has_payload:
        # Recon empty check
        sensor reconPayload reconstructor @payloadType
        jump taxiMode_idle notEqual reconPayload 0

        jump taxiMode_skip_calc_to equal hasTaxiDropCalc 1
            sensor unitX taxiRef @x
            sensor unitY taxiRef @y
            ubind taxiRef
            ucontrol stop
            ucontrol move unitX unitY
            op sub uDX reconX unitX
            op sub uDY reconY unitY
            op len uD uDX uDY
            op div uDX uDX uD
            op div uDY uDY uD
            op mul uDX uDX reconDropRadius
            op mul uDY uDY reconDropRadius
            op add toX reconX uDX
            op add toY reconY uDY
            set hasTaxiDropCalc 1
        taxiMode_skip_calc_to:
        ubind taxiRef
        ucontrol move toX toY
        ucontrol within reconX reconY 1 within
        jump taxiMode equal within 0
            set hasTaxiDropCalc 0
            ucontrol payDrop
            ucontrol stop
            jump taxiCount always 0

    taxiMode_idle:
        # Recon empty check
        sensor reconProgress reconstructor @progress
        jump taxiMode_resetIdle0Prog greaterThanEq reconProgress 0.003
            sensor reconProgress reconstructor @progress
            jump taxiMode_resetIdle0Prog equal reconProgress 0
                op sub reconProgressZeroETime @time reconProgressZeroPTime
                jump taxiMode_continueIdle lessThan reconProgressZeroETime 4e3
                    jump taxiMode_capped always 0
            taxiMode_resetIdle0Prog:
            set reconProgressZeroPTime @time
        taxiMode_continueIdle:

        ucontrol within reconX reconY reconIdleWithinRadius within
        jump taxiMode_idle_approach equal within 0
            op add taxiIdle_angle taxiIdle_angle 5
            op mod taxiIdle_angle taxiIdle_angle 360

            op sin taxiIdle_moveX taxiIdle_angle 0
            op mul taxiIdle_moveX taxiIdle_moveX reconIdleRadius
            op add taxiIdle_moveX taxiIdle_moveX reconX

            op cos taxiIdle_moveY taxiIdle_angle 0
            op mul taxiIdle_moveY taxiIdle_moveY reconIdleRadius
            op add taxiIdle_moveY taxiIdle_moveY reconY

            ubind taxiRef
            ucontrol move taxiIdle_moveX taxiIdle_moveY
            jump taxiMode always 0
        taxiMode_idle_approach:
        ucontrol approach reconX reconY

jump taxiMode always 0

taxiMode_capped:
    # Clear Units
    ubind unitRef
    ucontrol flag 0 0
    ubind taxiRef
    ucontrol flag 0 0
    set unitRef null
    set taxiRef null

    # Recon check
    getlink reconstructor reconLink
    jump configCheck notEqual reconType cachedReconType
    sensor reconPayload reconstructor @payloadType
    jump taxiCount equal reconPayload 0
jump taxiMode_capped always 0




# Unbind
unbind:
    ubind unitRef
    ucontrol flag 0 0
    ubind taxiRef
    ucontrol flag 0 0
    set unitRef null
    set taxiRef null
jump configCheck always 0

# Print messages
print_conDead:
    print "[sky]Unit Upgrader vDev\n[green]by SBytes[][]\n\n[#ff]⚠ No Reconstructor Linked"
    printflush message1
    jump configCheck always 0

jump configCheck always 0

# Credits
print "All Tier Upgrader vDev by SBytes"
