units = (
    "dagger",
    "mace",
    "fortress",
    "scepter",
    "reign",
    "nova",
    "pulsar",
    "quasar",
    "vela",
    "corvus",
    "crawler",
    "atrax",
    "spiroct",
    "arkyid",
    "toxopid",
    "flare",
    "horizon",
    "zenith",
    "antumbra",
    "eclipse",
    "mono",
    "poly",
    "mega",
    "quad",
    "oct",
    "risso",
    "minke",
    "bryde",
    "sei",
    "omura",
    "retusa",
    "oxynoe",
    "cyerce",
    "aegires",
    "navanax",
    "alpha",
    "beta",
    "gamma"
)

s = """
print "[sky]Unit Deflagger v1.3.1[]\\nby [green]SBytes[]"
# print "[sky]Unit Deflagger v1.3.1[]\\nby [green]SBytes\\n[#bfbfbf]Merged into 1 processor and optimized with py script[][]"


# Just because I don't want to have a 'deflagged' with no units afterwards
# lol

cell_titleCheck:"""

for unit in units:
    s += f"""
    jump cell_title_{unit} equal count_{unit} 0
        print "\\n\\n[lime]Deflagged[]"
        jump cell_{unit} always 0
    cell_title_{unit}:"""

s += """
jump cell_end always 0

"""
for unit in units:
    s += f"""
    jump cell_{unit}_skip equal count_{unit} 0
        cell_{unit}:
        print ",\\n"
        print count_{unit}
        print " {unit}"
    cell_{unit}_skip:"""

s += """
cell_end:
printflush message1


# Generated by py script
"""


for unit in units:
    if unit == units[-1]:
        s += f"""
    ubind @{unit}
    jump 0 equal @unit null
    set anchor @unit
    d_{unit}_loop:
        sensor unitDead anchor @dead
        jump 0 equal unitDead 1
        ubind @{unit}
        sensor unitFlag @unit @flag
        jump 0 equal unitFlag 0
        sensor unitCtrl @unit @controlled
        jump 0 equal unitCtrl 1
            ucontrol flag 0
            op add count_{unit} count_{unit} 1
    jump d_{unit}_loop notEqual @unit anchor"""
        continue

    s += f"""
    ubind @{unit}
    jump d_{unit}_end equal @unit null
    set anchor @unit
    d_{unit}_loop:
        sensor unitDead anchor @dead
        jump d_{unit}_end equal unitDead 1
        ubind @{unit}
        sensor unitFlag @unit @flag
        jump d_{unit}_end equal unitFlag 0
        sensor unitCtrl @unit @controlled
        jump d_{unit}_end equal unitCtrl 1
            ucontrol flag 0
            op add count_{unit} count_{unit} 1
    jump d_{unit}_loop notEqual @unit anchor
    d_{unit}_end:"""


with open("deflag_O.mlog", "w") as f:
    f.write(s)
