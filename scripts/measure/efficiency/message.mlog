# Wait if total count hasn't changed
read totalCount cell1 2
jump 0 equal totalCount prevTotalCount
set prevTotalCount totalCount

# Building count
read buildingCount cell1 1
    # No building detected
    jump _skipNoBuildings notEqual buildingCount 0
        print "[slate]EFficiency Measurer[]\n[sky]by Username ; SBytes[]\n\n[#ff]⚠ No building detected"
        printflush message1
        end
    _skipNoBuildings:

    # Too many buildings
    jump _skipErrBuildings lessThan buildingCount 31
        print "[slate]EFficiency Measurer[]\n[sky]by Username ; SBytes[]\n\n[#ff]⚠ Too many buildings (max 30)\n[gray]Count: "
        print buildingCount
        printflush message1
        end
    _skipErrBuildings:

# Title
print "[slate]EFficiency Measurer[]\n[sky]by Username ; SBytes[]\n\n[#ffff] Building Efficiencies[]\nCount: "
print buildingCount
print "[#bdbdbd] (showing first 5)[]\n   "
# Set variables
    # Offset because the first 4 addresses are reserved
    set address 4
    set avgSTCount 0
    set avgSCount 0
    set bPrintCount 0
jump _skipLoop always 0

# Keep looping until count is 0
_loop:
    # Sum all for average efficiency
    op add avgSTCount avgSTCount totalCount
    op add avgSCount avgSCount count

    # Only show first 6 building's efficiencies or else this would overflow message
    jump _skipPrintIndividualEff greaterThanEq bPrintCount 5
        # Get efficiency and round percentage to 4 d.c.
        op div efficiency count totalCount
        op idiv efficiencyF efficiency 1e-6
        op div efficiencyF efficiencyF 1e4
        print efficiencyF
        print "%\n   "
    _skipPrintIndividualEff:

    # Increment (next) address
    op add address address 2

    # Increment building print counter
    op add bPrintCount bPrintCount 1
_skipLoop:
read count cell1 address
jump _loop notEqual count 0

# Get average efficiency
print "\n[green] Avg. Efficiency: "
op div avgEff avgSCount avgSTCount
op idiv avgEffF avgEff 1e-6
op div avgEffF avgEffF 1e4
print avgEffF
print "%"
        # print "%\n[magenta] DeltaTime: "

# Print delta time (time spent lol)
        # op sub deltaTime @time prevTime
        # op floor deltaTime deltaTime 0
        # op div deltaTime deltaTime 1000
        # print deltaTime
        # print "s"
        # set prevTime @time

# Print flush
printflush message1
